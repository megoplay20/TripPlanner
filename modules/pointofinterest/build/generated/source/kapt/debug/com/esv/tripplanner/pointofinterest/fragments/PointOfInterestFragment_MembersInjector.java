// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.esv.tripplanner.pointofinterest.fragments;

import com.esv.tripplanner.core_api.data.entities.PointOfInterest;
import com.esv.tripplanner.core_api.helpers.ITypeCaster;
import com.esv.tripplanner.core_api.navigation.INavigatorComponentsProvider;
import com.esv.tripplanner.core_api.repositories.ITripRepository;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class PointOfInterestFragment_MembersInjector
    implements MembersInjector<PointOfInterestFragment> {
  private final Provider<ITypeCaster> typeCasterProvider;

  private final Provider<PointOfInterest> emptyPoiProvider;

  private final Provider<ITripRepository> repositoryProvider;

  private final Provider<INavigatorComponentsProvider> navComponentProvider;

  public PointOfInterestFragment_MembersInjector(
      Provider<ITypeCaster> typeCasterProvider,
      Provider<PointOfInterest> emptyPoiProvider,
      Provider<ITripRepository> repositoryProvider,
      Provider<INavigatorComponentsProvider> navComponentProvider) {
    this.typeCasterProvider = typeCasterProvider;
    this.emptyPoiProvider = emptyPoiProvider;
    this.repositoryProvider = repositoryProvider;
    this.navComponentProvider = navComponentProvider;
  }

  public static MembersInjector<PointOfInterestFragment> create(
      Provider<ITypeCaster> typeCasterProvider,
      Provider<PointOfInterest> emptyPoiProvider,
      Provider<ITripRepository> repositoryProvider,
      Provider<INavigatorComponentsProvider> navComponentProvider) {
    return new PointOfInterestFragment_MembersInjector(
        typeCasterProvider, emptyPoiProvider, repositoryProvider, navComponentProvider);
  }

  @Override
  public void injectMembers(PointOfInterestFragment instance) {
    injectTypeCaster(instance, typeCasterProvider.get());
    injectEmptyPoi(instance, emptyPoiProvider.get());
    injectRepository(instance, repositoryProvider.get());
    injectNavComponent(instance, navComponentProvider.get());
  }

  public static void injectTypeCaster(PointOfInterestFragment instance, ITypeCaster typeCaster) {
    instance.typeCaster = typeCaster;
  }

  public static void injectEmptyPoi(PointOfInterestFragment instance, PointOfInterest emptyPoi) {
    instance.emptyPoi = emptyPoi;
  }

  public static void injectRepository(
      PointOfInterestFragment instance, ITripRepository repository) {
    instance.repository = repository;
  }

  public static void injectNavComponent(
      PointOfInterestFragment instance, INavigatorComponentsProvider navComponent) {
    instance.navComponent = navComponent;
  }
}
