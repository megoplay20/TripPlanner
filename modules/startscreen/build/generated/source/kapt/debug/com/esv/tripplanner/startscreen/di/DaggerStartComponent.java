// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.esv.tripplanner.startscreen.di;

import com.esv.tripplanner.core_api.di.ProvidersFacade;
import com.esv.tripplanner.startscreen.fragments.StartFragment;
import com.esv.tripplanner.startscreen.fragments.StartFragment_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerStartComponent implements StartComponent {
  private ProvidersFacade providersFacade;

  private DaggerStartComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providersFacade = builder.providersFacade;
  }

  @Override
  public void inject(StartFragment fragment) {
    injectStartFragment(fragment);
  }

  private StartFragment injectStartFragment(StartFragment instance) {
    StartFragment_MembersInjector.injectRepository(
        instance,
        Preconditions.checkNotNull(
            providersFacade.provideTripRepo(),
            "Cannot return null from a non-@Nullable component method"));
    StartFragment_MembersInjector.injectNavigationProvider(
        instance,
        Preconditions.checkNotNull(
            providersFacade.provideNavigator(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private ProvidersFacade providersFacade;

    private Builder() {}

    public StartComponent build() {
      if (providersFacade == null) {
        throw new IllegalStateException(ProvidersFacade.class.getCanonicalName() + " must be set");
      }
      return new DaggerStartComponent(this);
    }

    public Builder providersFacade(ProvidersFacade providersFacade) {
      this.providersFacade = Preconditions.checkNotNull(providersFacade);
      return this;
    }
  }
}
