// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.esv.tripplanner.core_impl.di;

import android.app.Application;
import androidx.room.RoomDatabase;
import com.esv.tripplanner.core_api.di.IAppProvider;
import com.esv.tripplanner.core_api.repositories.ITripRepository;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerDatabaseComponent implements DatabaseComponent {
  private Provider<Application> provideApplicationProvider;

  private Provider<RoomDatabase> getTripDatabaseProvider;

  private Provider<ITripRepository> getTripRepositoryProvider;

  private DaggerDatabaseComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideApplicationProvider =
        new com_esv_tripplanner_core_api_di_IAppProvider_provideApplication(builder.iAppProvider);
    this.getTripDatabaseProvider =
        DoubleCheck.provider(
            DataModule_GetTripDatabaseFactory.create(
                builder.dataModule, provideApplicationProvider));
    this.getTripRepositoryProvider =
        DoubleCheck.provider(
            DataModule_GetTripRepositoryFactory.create(
                builder.dataModule, getTripDatabaseProvider));
  }

  @Override
  public RoomDatabase provideDb() {
    return getTripDatabaseProvider.get();
  }

  @Override
  public ITripRepository provideTripRepo() {
    return getTripRepositoryProvider.get();
  }

  public static final class Builder {
    private DataModule dataModule;

    private IAppProvider iAppProvider;

    private Builder() {}

    public DatabaseComponent build() {
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (iAppProvider == null) {
        throw new IllegalStateException(IAppProvider.class.getCanonicalName() + " must be set");
      }
      return new DaggerDatabaseComponent(this);
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder iAppProvider(IAppProvider iAppProvider) {
      this.iAppProvider = Preconditions.checkNotNull(iAppProvider);
      return this;
    }
  }

  private static class com_esv_tripplanner_core_api_di_IAppProvider_provideApplication
      implements Provider<Application> {
    private final IAppProvider iAppProvider;

    com_esv_tripplanner_core_api_di_IAppProvider_provideApplication(IAppProvider iAppProvider) {
      this.iAppProvider = iAppProvider;
    }

    @Override
    public Application get() {
      return Preconditions.checkNotNull(
          iAppProvider.provideApplication(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
