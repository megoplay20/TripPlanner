// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.esv.tripplanner.loadroute.di;

import com.esv.tripplanner.core_api.di.ProvidersFacade;
import com.esv.tripplanner.loadroute.fragments.LoadRouteFragment;
import dagger.internal.Preconditions;

public final class DaggerLoadRouteComponent implements LoadRouteComponent {
  private DaggerLoadRouteComponent(Builder builder) {}

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public void inject(LoadRouteFragment fragment) {}

  public static final class Builder {
    private ProvidersFacade providersFacade;

    private Builder() {}

    public LoadRouteComponent build() {
      if (providersFacade == null) {
        throw new IllegalStateException(ProvidersFacade.class.getCanonicalName() + " must be set");
      }
      return new DaggerLoadRouteComponent(this);
    }

    public Builder providersFacade(ProvidersFacade providersFacade) {
      this.providersFacade = Preconditions.checkNotNull(providersFacade);
      return this;
    }
  }
}
